spring:
  config:
    import: configserver:http://localhost:8888
  application:
    name: licensingservice
  profiles:
    active:
      default
  cloud:
    config:
      enabled: true
    stream:
      bindings:
        consume-in-0:
          destination: orgChangeTopic
          group: myConsumerGroup
          content-type: application/json
      kafka:
        binder:
          brokers: localhost:9092

eureka:
  instance:
    preferIpAddress: true
  client:
    registerWithEureka: true
    fetchRegistry: true
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/

#Setting the logging levels for the service
logging:
  level:
    com.netflix: WARN
    org.springframework.web: WARN
    com.thoughtmechanix: DEBUG
    io.github.resilience4j: DEBUG
#    org.springframework.cloud.stream: DEBUG
#    org.apache.kafka: DEBUG

resilience4j:
  contextPropagators: #not work
    enabled: true
    propagators:
      - class: com.thoughtmechanix.licenses.resilience4j.UserContextPropagator
  circuitbreaker:
    configs:
      default:
        registerHealthIndicator: true
        slidingWindowType: COUNT_BASED
        slidingWindowSize: 10 #when using count_based, this attribute will specify the number of most recently call being used to calculate the threshold
        # this mechanism is different from hystrix, hystrix used two attributes to divide the number of call into multiple window and analyse it.
        failureRateThreshold: 75 #errorThresholdPercentage
        waitDurationInOpenState: 7s #sleepWindowInMilliseconds
        minimumNumberOfCalls: 10 #requestVolumeThreshold
        permittedNumberOfCallsInHalfOpenState: 3
        eventConsumerBufferSize: 10
      licenseByOrg:
        baseConfig: default
        slidingWindowSize: 3
  bulkhead:
    instances:
      licenseByOrgThreadPool:
        coreThreadPoolSize: 5
        maxThreadPoolSize: 10
        queueCapacity: 10
        keepAliveDuration: 20s
        contextPropagators: com.thoughtmechanix.licenses.resilience4j.UserContextPropagator
  timelimiter:
    instances:
      licenseByOrgTimeout:
        timeoutDuration: 900ms
